  app {
  #application name
  name: "CitrusInvoiceRevenue"
  #blossom id of th project. Get blossom id from blossom application
  blossomID: "CI02995445",
  #team name
  teamName: "DataSciences-DE-MDF-TM"
  #Contact details
  contactDetails: "DataSciences-DE-MDF-TM@Target.com",
                    channel:"#mdf-success-mgs",
  env: "local",
  sla: "01:00 PM"
  queueName: "SVMDEDMD_AUTO"
  executionEngine: "tez"
  dynamicPartition: "true"
  dynamicPartitionMode: "nonstrict"
  jdbcUrl: "jdbc:hive2://brcn1003.target.com:2181,brcn1004.target.com:2181,brcn1008.target.com:2181,brcn1009.target.com:2181,brcn1012.target.com:2181/;serviceDiscoveryMode: zooKeeper;zooKeeperNamespace: hiveserver2"
  hiveTezInputFormat: "org.apache.hadoop.hive.ql.io.HiveInputFormat"
  mapReduceJobReduces: "50"
  jdbcHiveDriver: "org.apache.hive.jdbc.HiveDriver"

  templateLocation: "src/test/data/hive/citrus_invoice_revenue/sample_schema_datafile/",
  fileAPILandingLocation: "src/test/data/hive/citrus_invoice_revenue/land/",
  inputLocation: "src/test/data/hive/citrus_invoice_revenue/processing/",
  existingRecordsLocation: "src/test/data/hive/citrus_invoice_revenue/archive/",
  archivePartitonRecordsLocation: "src/test/data/hive/citrus_invoice_revenue/archive_partition/",
  corruptRecordLocation: "src/test/data/landing/citrus_invoice_revenue/data_processing_pipeline/output/corruptrecords/"
  dataQualityLocation: "src/test/data/landing/citrus_invoice_revenue/data_processing_pipeline/output/dqcorruptrecords/"

  # Failure location
  pipeLineFailures: "src/test/data/landing/citrus_invoice_revenue/data_processing_pipeline/output/pipeLineFailures"
  #location where lock will be created, so that user cannot rerun job if the lock is present
  lockLocation: "src/test/data/landing/citrus_invoice_revenue/configurations/dpp_lock"

  #Used for write to external table
  fndExtLocation: "src/test/data/hive/stg_sgn_fnd/citrus_invoice_revenue/"

  #spark session creation properties
  spark_sources_partitionOverwriteMode: "static"
  hive_partition_mode: "nonstrict"
  spark_orc_impl: "native"
  spark_enableVectorizedReader: "true"
  spark_wareHouseLocation: "/apps/hive/warehouse"
  hive_max_dynamic_partitions: "2000"
  dqThreshold: "1"

  # slack
  channel: "#mdf-success-mgs-test"
  dq_channel: "#mdf-success-mgs-test"
  failure_channel: "#mdf-alert-msgs-test"
  errChannel: "#mdf-alert-msgs-test"
  slackWebHook: "https://api.target.com/slack_events/v1/webhooks/"
  dq_channelID: "dStqc8EeBLuKxRu5hdV4I0gWk0V4TPBnQ108UL2rwlEy7Xm4enCar6xMJ9Jp4IPn"
  alert_channelID: "syDd4MKrWEbL7GtNlptYM2040rSGhg1ASZvdtqJmjccsueXq7dnWC9NYUfVCy5lz"

  #DB schema names
  fndSchema: "stg_mdf_fnd"
  stgSchema: "stg_mdf_stg"
  lndSchema: "stg_mdf_lzn"

  #DB table names
  lndCoreHistTable: "citrus_invoice_revenue_e"
  coreHistTable: "citrus_invoice_revenue"

  atomicHistPartitionColumnName: "report_d"
  coreHistPartitionColumnName: "report_d"
  #coalesce to be done for each stage. For demo we are taking this as global value.
  # Value should be calculated based on expected load
  coalesceFactor: 1
  #numberOfPartitions
  #the max partitions allowed to be written into the path provided
  numberOfPartitions: 10

    influxdb {
  #measurement name got from measurement team
  measurementName: "citrus-invoice-revenue-stg"
  #end point of influx to push data
  grafanaEndPoint: "https://metricsfrontdoor-shared.prod.target.com/write?db: metrics"
  }

    metrics {
  metricsKafkaPush: false
  metricsInfluxPush: true
  }

    executionOrder{
  executionOrder: "moveEphemeralFilesToProcess,readInput,validateSchema,removeDollarCharacter,replaceNullWithDefaultForAmtColumn,addFileDate,executeExternalSql,addDatePartitionColumn,handleNullsInPKColumns,dropDups,trim,validateDataType,convertDateFormat,validateDateFormat,convertTimestampToDate,convertTimestampFromLocalToUtc,convertTimestampFromUtcToLocal,rename,dqCheck,fndLoad"

  }

                    showResultsToLog{
                    showResultsToLog: "true"
                    numOfRows: 10

  }

                    showCustomResultsToLog{
                    showCustomResultsToLog: "true"
                    dataFrameNameAndExecuteSql: """{ \"readInput\":\"select * from readInput\"   ,
                                         \"rename\":\"select * from rename\"
                                        }"""
                    numOfRows: 10
  }

                    readInput {
                    inputEphemeralFilesFormat: "csv"
    #templateLocation: provide if inputEphemeralFilesFormat: "json" to infer schema
    #hasHeader: "true"
    #renameColumns: "defaulted to Seq.empty[String].Should be provided as string here like "abc,qwer,asd" "
    #selectColumns: "defaulted to Seq.empty[String].Should be provided as string here like "abc,qwer,asd" "
    #filter: "defaulted to empty string"
    #delimiter: "defaulted to empty string"
                    options: "header->true,quote->\",escape->\",MultiLine->false,ignoreTrailingWhiteSpace-> true"
                    getFileName: "true"

  }

    #add filename as the last column in csvSchemaString if getFileName: "true" in readInput
                    validateSchema {
                    csvSchemaString: "Source string, CompanyName string,AccountId string, CampaignName string, CampaignId string,CampaignBudget string, CampaignStartDate string, CampaignEndDate string, ClassId string, DepartmentId string,VendorNumber string, TCIN string, CalendarYear string, CalendarMonth string, Revenue string,filename string,CampaignJoinDate string,CampaignJoinDateTs string,CampaignJoinDateLocalTs string,CampaignJoinDateUtclTs string"
    #templateLocation: provide if inputEphemeralFilesFormat: "json"

  }

                    flatten{
                    flatten: "false"

  }

                    addFileDate{
                    sourceDateFormat: "yyyy-MM-dd"
                    sourceColumn: "filename"
                    targetColumn: "file_date"

  }

                    addDatePartitionColumn{
                    isPartitionColumnDatatypeDate: true
                    sourceColumn: "file_date"
                    targetColumn: "report_d"

  }

    getLatestByKeyCol{
  keyColName: "report_d"
  orderByColName: "file_date"
  windowingStrategy: "row_number"

  }

                    executeExternalSql{
                    dataFrameNameUsedInSql: "replaceNullWithDefaultForAmtColumn,addFileDate"
                    inputSql:      """{ \"1\":\"select Source,CompanyName,AccountId,CampaignName,CampaignId, CampaignStartDate, CampaignEndDate, ClassId, DepartmentId,VendorNumber,
                                  TCIN, CalendarYear, CalendarMonth,filename,CampaignJoinDate,CampaignJoinDateTs,CampaignJoinDateLocalTs,CampaignJoinDateUtclTs,
                                  sum(CampaignBudget)CampaignBudget,sum(Revenue) Revenue from replaceNullWithDefaultForAmtColumn group by
                                  Source,CompanyName,AccountId,CampaignName,CampaignId, CampaignStartDate, CampaignEndDate, ClassId, DepartmentId,VendorNumber,
                                  TCIN, CalendarYear, CalendarMonth,filename,CampaignJoinDate,CampaignJoinDateTs,CampaignJoinDateLocalTs,CampaignJoinDateUtclTs\"   ,
                                                  \"2\":\"select Source,CompanyName,AccountId,CampaignName,CampaignId, CampaignStartDate, CampaignEndDate, ClassId, DepartmentId,VendorNumber,
                                  TCIN, CalendarYear, CalendarMonth,filename,CampaignJoinDate,CampaignJoinDateTs,CampaignJoinDateLocalTs,CampaignJoinDateUtclTs,
                                  sum(CampaignBudget)CampaignBudget,sum(Revenue) Revenue from addFileDate group by
                                  Source,CompanyName,AccountId,CampaignName,CampaignId, CampaignStartDate, CampaignEndDate, ClassId, DepartmentId,VendorNumber,
                                  TCIN, CalendarYear, CalendarMonth,filename,CampaignJoinDate,CampaignJoinDateTs,CampaignJoinDateLocalTs,CampaignJoinDateUtclTs\"
                                    }"""
  }

                    dropDups{
                    location: "src/test/data/landing/citrus_invoice_revenue/data_processing_pipeline/output/dqcorruptrecords/"
                    partitionColumns: "Source,CompanyName,AccountId,CampaignName ,CampaignId,CampaignStartDate,CampaignEndDate,ClassId,DepartmentId,VendorNumber,TCIN,CalendarYear,CalendarMonth"
                    orderByColumn: "CampaignStartDate"

  }

                    validateNotNull{
                    inputColumns: "Source,CompanyName,AccountId,CampaignName ,CampaignId,CampaignStartDate,CampaignEndDate,ClassId,DepartmentId,VendorNumber,TCIN,CalendarYear,CalendarMonth"

  }

                    validateDataType{
                    inputColumns: "{\"CampaignBudget\":\"decimal(38,2)\", \"Revenue\":\"decimal(38,8)\"}"

  }

                    validateDateFormat{
                    inputColumns: "CampaignStartDate,CampaignEndDate"
                    sourceDateFormat: "yyyy-MM-dd"

  }

                    removeDollarCharacter{
                    inputColumns: "CampaignBudget,Revenue"

  }

                    replaceNullWithDefaultForAmtColumn{
                    inputColumns: "CampaignBudget,Revenue"
                    default: "0.00"

  }

                    replaceNullWithDefaultForQtyColumn{
                    inputColumns: "New_Customers,Unique_Customers,Impressions,Clicks,Sales,Leads,PotentialActions"
                    default: "0"

  }

                    removeNonUtfCharacter{
                    inputColumns: ""

  }

                    convertMicroToCurrency{
                    inputColumns: "CampaignBudget,Revenue"

  }

                    countByFileDateAndPartitionDate{
                    partitionDateColumn: "report_d"
                    fileDateColumn: "file_date"

  }

                    handleNullsInPKColumns{
                    inputColumns: """{ \"CampaignId\":\"123\"   ,
                                             \"CompanyName\":\"NA\"   ,
                                             \"CampaignStartDate\":\"9999-12-31\"
                                             }"""
  }

                    convertDatePartOfTsToDefault{
                    inputColumns: "CampaignEndDateTs"
                    inputTsFormat: "MM/dd/yy HH:mm"

  }

                    convertDateFormat{
                    inputColumns: "CampaignJoinDate"
                    inputDateFormat: "d/MM/yyyy"
                    outputDateFormat: "yyyy-MM-dd"

  }


                    convertTimestampToDate{
                    inputColumns: "CampaignJoinDateTs"
                    outputFormat: "yyyy-MM-dd"

  }

                    convertTimestampFromLocalToUtc{
                    inputColumns: "CampaignJoinDateLocalTs"
                    inputFormat: "yyyy-MM-dd'T'HH:mm:ss.SSS"
                    outputFormat: "yyyy-MM-dd HH:mm:ss"
                    timezone: "America/Chicago"

  }

                    convertTimestampFromUtcToLocal{
                    inputColumns: "CampaignJoinDateUtclTs"
                    inputFormat: "yyyy-MM-dd'T'HH:mm:ss.SSS"
                    outputFormat: "yyyy-MM-dd HH:mm:ss"
                    timezone: "America/Chicago"

  }

                    joinCal{
                    calendarColumns: "calendar_d,day_n,fiscal_week_n,fiscal_week_end_d,fiscal_week_begin_d,calendar_fiscal_week,fiscal_month_id,fiscal_month_abbreviation_n,fiscal_month_n , fiscal_quarter_id , fiscal_quarter_n, fiscal_year_id ,fiscal_year_week_id"
                    calendarColumnsWithAnyTransformation: "calendar_d,day_n,fiscal_week_n,fiscal_week_end_d,fiscal_week_begin_d,concat(fiscal_week_begin_d , '-' ,fiscal_week_end_d) calendar_fiscal_week,fiscal_month_id,fiscal_month_abbreviation_n  fiscal_month_n , fiscal_quarter_id , fiscal_quarter_n, fiscal_year_id ,fiscal_year_week_id"
                    calendarTable: "prd_cal_fnd.calendar"
                    tempCalendarExtLocation: "/user/SVMDEDMD/hive/citrus_invoice_revenue/calendar"
                    inputJoinConditionColumn: "report_d"
                    calendarJoinConditionColumn: "calendar_d"
  }

                    rename {
                    renameColumns: """{ \"Source\":\"source_name\"   ,
                                    \"CompanyName\":\"company_name\"   ,
                                    \"AccountId\":\"account_id\"   ,
                                    \"CampaignName\":\"campaign_name\"   ,
                                    \"CampaignId\":\"campaign_id\"   ,
                                    \"CampaignBudget\":\"campaign_budget_a\"   ,
                                    \"CampaignStartDate\":\"campaign_start_date\"   ,
                                    \"CampaignEndDate\":\"campaign_end_date\"   ,
                                    \"ClassId\":\"class_id\"   ,
                                    \"DepartmentId\" :\"dept_id\"   ,
                                    \"VendorNumber\":\"vendor_number\"   ,
                                    \"TCIN\" :\"tcin\"   ,
                                    \"CalendarYear\":\"calendar_year\"   ,
                                    \"CalendarMonth\":\"calendar_month\"   ,
                                    \"Revenue\":\"revenue_a\"
                                    }"""
  }

                    dqCheck{
                    dqCheckSourceAndTargetDFName: "dropDups,rename"
                    dqColumns: "campaign_budget_a , revenue_a ,report_d"
                    dupsCheckKey: "source_name,company_name,account_id,campaign_name ,campaign_id,campaign_budget_a,campaign_start_date,campaign_end_date,class_id,dept_id,vendor_number,tcin,calendar_year,calendar_month",
                    nullsCheckKey: "source_name,company_name,account_id,campaign_name ,campaign_id,campaign_start_date,campaign_end_date,class_id,dept_id,vendor_number,tcin,calendar_year,calendar_month"
                    loggerName: "CitrusInvoiceRevenueMonthly",
                    reportingDateColumnFlag: "true",
                    srcColumnRenameList: """{ \"Source\":\"source_name\"   ,
                                      \"CompanyName\":\"company_name\"   ,
                                      \"AccountId\":\"account_id\"   ,
                                      \"CampaignName\":\"campaign_name\"   ,
                                      \"CampaignId\":\"campaign_id\"   ,
                                      \"CampaignBudget\":\"campaign_budget_a\"   ,
                                      \"CampaignStartDate\":\"campaign_start_date\"   ,
                                      \"CampaignEndDate\":\"campaign_end_date\"   ,
                                      \"ClassId\":\"class_id\"   ,
                                      \"DepartmentId\" :\"dept_id\"   ,
                                      \"VendorNumber\":\"vendor_number\"   ,
                                      \"TCIN\" :\"tcin\"   ,
                                      \"CalendarYear\":\"calendar_year\"   ,
                                      \"CalendarMonth\":\"calendar_month\"   ,
                                      \"Revenue\":\"revenue_a\"
                                      }""",
    #tgtColumnRenameList:
                    scale: 0,
                    throwExceptionUponFailure: "false",
                    nullCheckFlag: "true",
                    dupCheckFlag: "true",
                    partitionDateColName: "report_d",
                    targetTablename: "prd_mdf_fnd.citrus_invoice_revenue",
    #threshold
    #thresholdPercent
    #thresholdPercentJson
                    ignoreCountCheck: true,
                    dqCheckResultShowToLog: false

  }

                    archiveArchivePartition{
                    deleteSource: "false"
  }

                    archiveEphemeral{
                    deleteSource: "true"

  }

                    atomicHistLoad{
                    inputDFNameFromExecutionOrder: "addFileDate",
                    insertColumns: "CompanyName , AccountId ,CampaignName , CampaignId , CampaignBudget ,CampaignStartDate , CampaignEndDate , DepartmentId , VendorNumber , TCIN ,CalendarYear , CalendarMonth , Revenue,filename",
                    partitionColumns: "file_date",
                    repartition: true
  }

                    fndLoad{
                    inputDFNameFromExecutionOrder: "rename"
                    insertColumns: """company_name ,
                                account_id ,
                                campaign_name,
                                campaign_id ,
                                campaign_budget_a ,
                                campaign_start_date ,
                                campaign_end_date ,
                                class_id ,
                                dept_id ,
                                vendor_number ,
                                tcin ,
                                revenue_a ,
                                calendar_year ,
                                calendar_month
                                """,
                    partitionColumns: "calendar_year,calendar_month",
                    repartition: true
  }

                    deleteTriggerFile{
                    doneFile: ""
                    }

  }